services:
  backend:
    image: node:${NODE_VERSION}-alpine
    container_name: ${PROJECT_NAME}-backend
    working_dir: /app
    volumes:
      - ./backend:/app:z
      - /app/node_modules
    ports:
      - "${BACKEND_PORT}:4000"
    command: sh -c "npm install && npm run start:dev"
    environment:
      - NODE_ENV=${NODE_ENV}
    networks:
      - ${NETWORK_NAME}

  frontend:
    image: node:${NODE_VERSION}-alpine
    container_name: ${PROJECT_NAME}-frontend
    working_dir: /app
    volumes:
      - ./frontend:/app:z
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT}:3000"
    command: sh -c "npm install && npm run dev"
    environment:
      - NODE_ENV=${NODE_ENV}
    networks:
      - ${NETWORK_NAME}

  n8n:
    image: n8nio/n8n:${N8N_VERSION}
    container_name: ${PROJECT_NAME}-n8n
    restart: unless-stopped
    ports:
      - "${N8N_PORT}:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - GENERIC_TIMEZONE=${TIMEZONE}
    volumes:
      - ./n8n_data:/home/node/.n8n:z
    networks:
      - ${NETWORK_NAME}

  postgres:
    image: postgres:${POSTGRES_VERSION}-alpine
    container_name: ${PROJECT_NAME}-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data:z
    networks:
      - ${NETWORK_NAME}

networks:
  aws-manager-net:
    driver: bridge
    name: ${NETWORK_NAME}
